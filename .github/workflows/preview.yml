name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  preview:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: turbo/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Install Neon CLI
        run: npm install -g neonctl@latest

      - name: Check Neon Configuration
        if: github.event.action != 'closed'
        id: neon_check
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          if [ -z "$NEON_API_KEY" ] || [ -z "$NEON_PROJECT_ID" ]; then
            echo "Neon is not configured. Skipping database branch creation."
            echo "neon_configured=false" >> $GITHUB_OUTPUT
          else
            echo "neon_configured=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Neon Branch
        if: github.event.action != 'closed' && steps.neon_check.outputs.neon_configured == 'true'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="preview-pr-${{ github.event.pull_request.number }}"
          
          # Check if branch exists
          if neonctl branches list --project-id $NEON_PROJECT_ID --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Branch $BRANCH_NAME already exists, deleting and recreating"
            # Delete and recreate is simpler than reset
            neonctl branches delete $BRANCH_NAME --project-id $NEON_PROJECT_ID || true
            neonctl branches create --name $BRANCH_NAME --project-id $NEON_PROJECT_ID
          else
            echo "Creating new branch $BRANCH_NAME"
            neonctl branches create --name $BRANCH_NAME --project-id $NEON_PROJECT_ID
          fi
          
          # Get connection string
          DATABASE_URL=$(neonctl connection-string $BRANCH_NAME --project-id $NEON_PROJECT_ID --database-name neondb --pooled)
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "NEON_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Run Database Migrations
        if: github.event.action != 'closed' && steps.neon_check.outputs.neon_configured == 'true'
        working-directory: ./turbo
        run: |
          pnpm install
          cd apps/web
          pnpm db:migrate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Deploy Web to Vercel
        if: github.event.action != 'closed'
        id: deploy_web
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          environment: preview
          environment-variables: |
            DATABASE_URL=${{ env.DATABASE_URL }}
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

      - name: Deploy Docs to Vercel
        if: github.event.action != 'closed' && vars.VERCEL_PROJECT_ID_DOCS != ''
        id: deploy_docs
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          environment: preview
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

      - name: Mark Deployments as Inactive
        if: github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            // Get all deployments for this PR
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            
            // Mark each deployment as inactive
            for (const deployment of deployments.data) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                description: 'PR closed - deployment removed'
              });
            }

      - name: Delete Neon Branch
        if: github.event.action == 'closed'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="preview-pr-${{ github.event.pull_request.number }}"
          
          # Check if branch exists before trying to delete
          if neonctl branches list --project-id $NEON_PROJECT_ID --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Deleting branch $BRANCH_NAME"
            neonctl branches delete $BRANCH_NAME --project-id $NEON_PROJECT_ID
          else
            echo "Branch $BRANCH_NAME does not exist, skipping deletion"
          fi

  production-web:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Web to Production
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          environment: production

  production-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.VERCEL_PROJECT_ID_DOCS != ''
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Docs to Production
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          environment: production
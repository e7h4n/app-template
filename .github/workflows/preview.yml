name: Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  # Call turbo.yml for testing and building
  build:
    if: github.event.action != 'closed'
    uses: ./.github/workflows/turbo.yml
    secrets: inherit

  # Create database branch for preview
  database:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.action != 'closed'
    outputs:
      database-url: ${{ steps.branch.outputs.database-url }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/init

      - name: Create Neon Branch and Run Migrations
        id: branch
        uses: ./.github/actions/neon-branch
        with:
          neon-api-key: ${{ secrets.NEON_API_KEY }}
          neon-project-id: ${{ vars.NEON_PROJECT_ID }}
          branch-name: "preview-pr-${{ github.event.pull_request.number }}"
          action: "create-and-migrate"

  # Deploy web application
  deploy-web:
    runs-on: ubuntu-latest
    needs: [build, database]
    if: github.event.action != 'closed'
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: turbo/apps/

      - name: Deploy Web to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          environment: preview
          environment-variables: |
            DATABASE_URL=${{ needs.database.outputs.database-url }}
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}
          output-dir: turbo/apps/web/dist/

  # Deploy docs application
  deploy-docs:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event.action != 'closed' && vars.VERCEL_PROJECT_ID_DOCS != ''
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: turbo/apps/

      - name: Deploy Docs to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          environment: preview
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}
          output-dir: turbo/apps/docs/dist/

  # Cleanup resources when PR is closed
  cleanup-database:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - uses: actions/checkout@v4

      - name: Delete Neon Branch
        uses: ./.github/actions/neon-branch
        with:
          neon-api-key: ${{ secrets.NEON_API_KEY }}
          neon-project-id: ${{ vars.NEON_PROJECT_ID }}
          branch-name: "preview-pr-${{ github.event.pull_request.number }}"
          action: "delete"

  cleanup-deployments:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    permissions:
      deployments: write
    steps:
      - name: Mark Deployments as Inactive
        uses: actions/github-script@v7
        with:
          script: |
            // Get all deployments for this PR
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });

            // Mark each deployment as inactive
            for (const deployment of deployments.data) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                description: 'PR closed - deployment removed'
              });
            }
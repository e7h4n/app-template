name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  preview:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: turbo/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Install Neon CLI
        run: npm install -g neonctl@latest

      - name: Check Neon Configuration
        if: github.event.action != 'closed'
        id: neon_check
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          if [ -z "$NEON_API_KEY" ] || [ -z "$NEON_PROJECT_ID" ]; then
            echo "Neon is not configured. Skipping database branch creation."
            echo "neon_configured=false" >> $GITHUB_OUTPUT
          else
            echo "neon_configured=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Neon Branch
        if: github.event.action != 'closed' && steps.neon_check.outputs.neon_configured == 'true'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="preview-pr-${{ github.event.pull_request.number }}"
          
          # Check if branch exists
          if neonctl branches list --project-id $NEON_PROJECT_ID --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Branch $BRANCH_NAME already exists, deleting and recreating"
            # Delete and recreate is simpler than reset
            neonctl branches delete $BRANCH_NAME --project-id $NEON_PROJECT_ID || true
            neonctl branches create --name $BRANCH_NAME --project-id $NEON_PROJECT_ID
          else
            echo "Creating new branch $BRANCH_NAME"
            neonctl branches create --name $BRANCH_NAME --project-id $NEON_PROJECT_ID
          fi
          
          # Get connection string
          DATABASE_URL=$(neonctl connection-string $BRANCH_NAME --project-id $NEON_PROJECT_ID --database-name neondb --pooled)
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "NEON_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Run Database Migrations
        if: github.event.action != 'closed' && steps.neon_check.outputs.neon_configured == 'true'
        working-directory: ./turbo
        run: |
          pnpm install
          cd apps/web
          pnpm db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Create GitHub Deployment for Web
        if: github.event.action != 'closed'
        id: create_deployment_web
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: 'preview-web',
              description: `Preview deployment for PR #${context.payload.pull_request.number}`,
              transient_environment: true,
              auto_merge: false,
              required_contexts: [],
              production_environment: false
            });
            core.setOutput('deployment_id', deployment.data.id);

      - name: Deploy Web to Vercel
        if: github.event.action != 'closed'
        env:
          VERCEL_ORG_ID: ${{ vars.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          # Check if Vercel is configured
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Vercel is not configured. Please add VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID_WEB secrets."
            exit 1
          fi
          
          # Initialize Vercel project with correct configuration
          mkdir -p .vercel
          echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json
          
          # Build and deploy with or without DATABASE_URL
          if [ -n "$DATABASE_URL" ]; then
            vercel deploy \
              --token=$VERCEL_TOKEN \
              --env DATABASE_URL=$DATABASE_URL \
              --meta branch=${{ github.head_ref }} \
              --meta pr=${{ github.event.pull_request.number }} \
              > deployment-url-web.txt
          else
            echo "Warning: Deploying without DATABASE_URL (Neon not configured)"
            vercel deploy \
              --token=$VERCEL_TOKEN \
              --meta branch=${{ github.head_ref }} \
              --meta pr=${{ github.event.pull_request.number }} \
              > deployment-url-web.txt
          fi
          
          echo "DEPLOYMENT_URL_WEB=$(cat deployment-url-web.txt)" >> $GITHUB_ENV
          cd ../../..

      - name: Update GitHub Deployment Status for Web
        if: github.event.action != 'closed' && env.DEPLOYMENT_URL_WEB != ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment_web.outputs.deployment_id }},
              state: 'success',
              environment_url: process.env.DEPLOYMENT_URL_WEB,
              description: 'Web app deployed successfully',
              auto_inactive: true
            });

      - name: Create GitHub Deployment for Docs
        if: github.event.action != 'closed' && vars.VERCEL_PROJECT_ID_DOCS != ''
        id: create_deployment_docs
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: 'preview-docs',
              description: `Docs preview for PR #${context.payload.pull_request.number}`,
              transient_environment: true,
              auto_merge: false,
              required_contexts: [],
              production_environment: false
            });
            core.setOutput('deployment_id', deployment.data.id);

      - name: Deploy Docs to Vercel
        if: github.event.action != 'closed'
        env:
          VERCEL_ORG_ID: ${{ vars.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Check if Vercel is configured for docs
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Vercel docs is not configured. Skipping docs deployment."
            echo "DOCS_DEPLOYED=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Initialize Vercel project with correct configuration
          mkdir -p .vercel
          echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json
          
          vercel deploy \
            --token=$VERCEL_TOKEN \
            --meta branch=${{ github.head_ref }} \
            --meta pr=${{ github.event.pull_request.number }} \
            > deployment-url-docs.txt
          
          echo "DEPLOYMENT_URL_DOCS=$(cat deployment-url-docs.txt)" >> $GITHUB_ENV
          echo "DOCS_DEPLOYED=true" >> $GITHUB_ENV
          cd ../../..

      - name: Update GitHub Deployment Status for Docs
        if: github.event.action != 'closed' && env.DOCS_DEPLOYED == 'true' && env.DEPLOYMENT_URL_DOCS != ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment_docs.outputs.deployment_id }},
              state: 'success',
              environment_url: process.env.DEPLOYMENT_URL_DOCS,
              description: 'Docs deployed successfully',
              auto_inactive: true
            });

      - name: Comment PR with Deployment Info
        if: github.event.action != 'closed' && (env.DEPLOYMENT_URL_WEB != '' || env.DEPLOYMENT_URL_DOCS != '')
        uses: actions/github-script@v7
        with:
          script: |
            const webUrl = process.env.DEPLOYMENT_URL_WEB;
            const docsUrl = process.env.DEPLOYMENT_URL_DOCS;
            const docsDeployed = process.env.DOCS_DEPLOYED === 'true';
            const branchName = process.env.NEON_BRANCH_NAME || '';
            
            let comment = `### ðŸš€ Preview Deployments Ready!\n\n`;
            
            if (webUrl) {
              comment += `**Web App:** ${webUrl}\n`;
            }
            
            if (docsDeployed && docsUrl) {
              comment += `**Docs Site:** ${docsUrl}\n`;
            }
            
            if (branchName) {
              comment += `**Neon Branch:** \`${branchName}\`\n`;
            } else if (webUrl) {
              comment += `**Database:** Using default configuration (Neon not configured)\n`;
            }
            
            comment += `\nThese previews will be automatically updated with each commit.`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployments Ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Mark Deployments as Inactive
        if: github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            // Get all deployments for this PR
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            
            // Mark each deployment as inactive
            for (const deployment of deployments.data) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                description: 'PR closed - deployment removed'
              });
            }

      - name: Delete Neon Branch
        if: github.event.action == 'closed'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="preview-pr-${{ github.event.pull_request.number }}"
          
          # Check if branch exists before trying to delete
          if neonctl branches list --project-id $NEON_PROJECT_ID --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Deleting branch $BRANCH_NAME"
            neonctl branches delete $BRANCH_NAME --project-id $NEON_PROJECT_ID
          else
            echo "Branch $BRANCH_NAME does not exist, skipping deletion"
          fi

  production-web:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: turbo/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy Web to Production
        env:
          VERCEL_ORG_ID: ${{ vars.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd turbo/apps/web
          # Initialize Vercel project with correct configuration
          mkdir -p .vercel
          echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json
          vercel deploy --prod --token=$VERCEL_TOKEN

  production-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: turbo/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy Docs to Production
        env:
          VERCEL_ORG_ID: ${{ vars.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Check if docs deployment is configured
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Docs deployment not configured. Skipping."
            exit 0
          fi
          
          cd turbo/apps/docs
          # Initialize Vercel project with correct configuration
          mkdir -p .vercel
          echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json
          vercel deploy --prod --token=$VERCEL_TOKEN

name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  preview:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: turbo/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Install Neon CLI
        run: npm install -g neonctl@latest

      - name: Check Neon Configuration
        if: github.event.action != 'closed'
        id: neon_check
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          if [ -z "$NEON_API_KEY" ] || [ -z "$NEON_PROJECT_ID" ]; then
            echo "Neon is not configured. Skipping database branch creation."
            echo "neon_configured=false" >> $GITHUB_OUTPUT
          else
            echo "neon_configured=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Neon Branch
        if: github.event.action != 'closed' && steps.neon_check.outputs.neon_configured == 'true'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="preview-pr-${{ github.event.pull_request.number }}"
          
          # Check if branch exists
          if neonctl branches list --project-id $NEON_PROJECT_ID --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Branch $BRANCH_NAME already exists, deleting and recreating"
            # Delete and recreate is simpler than reset
            neonctl branches delete $BRANCH_NAME --project-id $NEON_PROJECT_ID || true
            neonctl branches create --name $BRANCH_NAME --project-id $NEON_PROJECT_ID
          else
            echo "Creating new branch $BRANCH_NAME"
            neonctl branches create --name $BRANCH_NAME --project-id $NEON_PROJECT_ID
          fi
          
          # Get connection string
          DATABASE_URL=$(neonctl connection-string $BRANCH_NAME --project-id $NEON_PROJECT_ID --database-name neondb --pooled)
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "NEON_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Run Database Migrations
        if: github.event.action != 'closed' && steps.neon_check.outputs.neon_configured == 'true'
        working-directory: ./turbo
        run: |
          pnpm install
          cd apps/web
          pnpm db:push
        env:
          POSTGRES_URL: ${{ env.DATABASE_URL }}

      - name: Deploy to Vercel
        if: github.event.action != 'closed'
        env:
          VERCEL_ORG_ID: ${{ vars.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          # Check if Vercel is configured
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Vercel is not configured. Please add VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID secrets."
            exit 1
          fi
          
          # Initialize Vercel project with correct configuration
          mkdir -p .vercel
          echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json
          
          # Build and deploy with or without DATABASE_URL
          if [ -n "$DATABASE_URL" ]; then
            vercel deploy \
              --token=$VERCEL_TOKEN \
              --env DATABASE_URL=$DATABASE_URL \
              --meta branch=${{ github.head_ref }} \
              --meta pr=${{ github.event.pull_request.number }} \
              > deployment-url.txt
          else
            echo "Warning: Deploying without DATABASE_URL (Neon not configured)"
            vercel deploy \
              --token=$VERCEL_TOKEN \
              --meta branch=${{ github.head_ref }} \
              --meta pr=${{ github.event.pull_request.number }} \
              > deployment-url.txt
          fi
          
          echo "DEPLOYMENT_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV

      - name: Comment PR with Deployment Info
        if: github.event.action != 'closed' && env.DEPLOYMENT_URL != ''
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            const branchName = process.env.NEON_BRANCH_NAME || '';
            
            let comment = `### ðŸš€ Preview Deployment Ready!\n\n`;
            comment += `**Vercel Preview:** ${deploymentUrl}\n`;
            
            if (branchName) {
              comment += `**Neon Branch:** \`${branchName}\`\n`;
            } else {
              comment += `**Database:** Using default configuration (Neon not configured)\n`;
            }
            
            comment += `\nThis preview will be automatically updated with each commit.`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Delete Neon Branch
        if: github.event.action == 'closed'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="preview-pr-${{ github.event.pull_request.number }}"
          
          # Check if branch exists before trying to delete
          if neonctl branches list --project-id $NEON_PROJECT_ID --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Deleting branch $BRANCH_NAME"
            neonctl branches delete $BRANCH_NAME --project-id $NEON_PROJECT_ID
          else
            echo "Branch $BRANCH_NAME does not exist, skipping deletion"
          fi

  production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: turbo/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy to Production
        env:
          VERCEL_ORG_ID: ${{ vars.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Initialize Vercel project with correct configuration
          mkdir -p .vercel
          echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json
          vercel deploy --prod --token=$VERCEL_TOKEN
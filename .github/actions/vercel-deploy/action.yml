name: "Vercel Deploy"
description: "Deploy to Vercel with reusable configuration"

inputs:
  vercel-token:
    description: "Vercel authentication token"
    required: true
  vercel-org-id:
    description: "Vercel organization ID"
    required: true
  vercel-project-id:
    description: "Vercel project ID"
    required: true
  environment:
    description: "Deployment environment (preview or production)"
    required: false
    default: "preview"
  environment-variables:
    description: "Environment variables for deployment (key=value pairs, one per line)"
    required: false
    default: ""
  meta-branch:
    description: "Branch name for metadata"
    required: false
    default: ""
  meta-pr:
    description: "PR number for metadata"
    required: false
    default: ""

outputs:
  deployment-url:
    description: "The URL of the deployment"
    value: ${{ steps.deploy.outputs.url }}

runs:
  using: "composite"
  steps:
    - name: Install Vercel CLI
      shell: bash
      if: github.event.action != 'closed'
      run: |
        # Check if Vercel CLI is installed, install if not
        if ! command -v vercel &> /dev/null; then
          echo "Vercel CLI not found, installing..."
          npm install -g vercel@latest
        else
          echo "Vercel CLI already installed"
        fi

        # Output Vercel version
        echo "Vercel CLI version:"
        vercel --version

    - name: Deploy to Vercel
      id: deploy
      shell: bash
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
        VERCEL_TOKEN: ${{ inputs.vercel-token }}
      run: |
        # Initialize Vercel project configuration
        mkdir -p .vercel
        echo '{"orgId":"'$VERCEL_ORG_ID'","projectId":"'$VERCEL_PROJECT_ID'"}' > .vercel/project.json

        vercel pull --token=${ inputs.vercel-token }} --environment=${{ inputs.environment }}

        # Build deployment command
        DEPLOY_CMD="vercel deploy --token=$VERCEL_TOKEN"

        # Add production flag if needed
        if [ "${{ inputs.environment }}" == "production" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --prod"
        fi

        # Add metadata if provided
        if [ -n "${{ inputs.meta-branch }}" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --meta branch=${{ inputs.meta-branch }}"
        fi

        if [ -n "${{ inputs.meta-pr }}" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --meta pr=${{ inputs.meta-pr }}"
        fi

        # Add environment variables if provided
        if [ -n "${{ inputs.environment-variables }}" ]; then
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              # Parse key=value format
              KEY=$(echo "$line" | cut -d'=' -f1)
              VALUE=$(echo "$line" | cut -d'=' -f2-)
              DEPLOY_CMD="$DEPLOY_CMD --env $KEY=\"$VALUE\""
            fi
          done <<< "${{ inputs.environment-variables }}"
        fi

        # Execute deployment and capture URL
        echo "Executing deployment..."
        DEPLOYMENT_URL=$(eval $DEPLOY_CMD)

        # Output the deployment URL
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployment URL: $DEPLOYMENT_URL"

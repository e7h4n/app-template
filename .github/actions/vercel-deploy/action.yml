name: "Vercel Deploy"
description: "Deploy to Vercel with reusable configuration"

inputs:
  vercel-token:
    description: "Vercel authentication token"
    required: true
  vercel-org-id:
    description: "Vercel organization ID"
    required: true
  vercel-project-id:
    description: "Vercel project ID"
    required: true
  environment:
    description: "Deployment environment (preview or production)"
    required: false
    default: "preview"
  environment-variables:
    description: "Environment variables for deployment (key=value pairs, one per line)"
    required: false
    default: ""
  meta-branch:
    description: "Branch name for metadata"
    required: false
    default: ""
  meta-pr:
    description: "PR number for metadata"
    required: false
    default: ""

outputs:
  deployment-url:
    description: "The URL of the deployment"
    value: ${{ steps.deploy.outputs.url }}
  deployment-id:
    description: "The GitHub deployment ID"
    value: ${{ steps.create-deployment.outputs.deployment-id }}

runs:
  using: "composite"
  steps:
    - name: Install Vercel CLI
      shell: bash
      if: github.event.action != 'closed'
      run: |
        # Check if Vercel CLI is installed, install if not
        if ! command -v vercel &> /dev/null; then
          echo "Vercel CLI not found, installing..."
          npm install -g vercel@latest
        else
          echo "Vercel CLI already installed"
        fi

        # Output Vercel version
        echo "Vercel CLI version:"
        vercel --version

    - name: Prepare Vercel configuration
      shell: bash
      run: |
        # Initialize Vercel project configuration
        mkdir -p .vercel
        echo '{"orgId":"${{ inputs.vercel-org-id }}","projectId":"${{ inputs.vercel-project-id }}"}' > .vercel/project.json
        pwd
        cat .vercel/project.json
        vercel pull --token=${{ inputs.vercel-token }}

    - name: Build
      shell: bash
      run: |
        vercel build --token=${{ inputs.vercel-token }}

    - name: Create GitHub deployment
      id: create-deployment
      shell: bash
      run: |
        # Create GitHub deployment record
        if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "push" ]; then
          DEPLOYMENT_JSON=$(curl -s -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d "{
              \"ref\": \"${{ github.sha }}\",
              \"environment\": \"${{ inputs.environment }}\",
              \"description\": \"Vercel deployment for ${{ github.ref_name }}\",
              \"auto_merge\": false,
              \"required_contexts\": []
            }")
          
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_JSON" | jq -r '.id')
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Created GitHub deployment: $DEPLOYMENT_ID"
          
          # Set deployment status to in_progress
          curl -s -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
            -d "{
              \"state\": \"in_progress\",
              \"description\": \"Deploying to Vercel...\"
            }"
        else
          echo "deployment-id=" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Vercel
      id: deploy
      shell: bash
      run: |
        # Build deployment command
        DEPLOY_CMD="vercel deploy --prebuilt --token=${{ inputs.vercel-token }}"

        # Add production flag if needed
        if [ "${{ inputs.environment }}" == "production" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --prod"
        fi

        # Add metadata if provided
        if [ -n "${{ inputs.meta-branch }}" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --meta branch=${{ inputs.meta-branch }}"
        fi

        if [ -n "${{ inputs.meta-pr }}" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --meta pr=${{ inputs.meta-pr }}"
        fi

        # Add environment variables if provided
        if [ -n "${{ inputs.environment-variables }}" ]; then
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              # Parse key=value format
              KEY=$(echo "$line" | cut -d'=' -f1)
              VALUE=$(echo "$line" | cut -d'=' -f2-)
              DEPLOY_CMD="$DEPLOY_CMD --env $KEY=\"$VALUE\""
            fi
          done <<< "${{ inputs.environment-variables }}"
        fi

        # Execute deployment and capture URL
        echo "Executing deployment..."
        DEPLOYMENT_URL=$(eval $DEPLOY_CMD)

        # Output the deployment URL
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployment URL: $DEPLOYMENT_URL"

    - name: Update deployment status - success
      shell: bash
      if: success() && steps.create-deployment.outputs.deployment-id != ''
      run: |
        # Update GitHub deployment status to success
        curl -s -X POST \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create-deployment.outputs.deployment-id }}/statuses \
          -d "{
            \"state\": \"success\",
            \"target_url\": \"${{ steps.deploy.outputs.url }}\",
            \"description\": \"Vercel deployment successful\"
          }"
        echo "Updated deployment status to success"

    - name: Update deployment status - failure
      shell: bash
      if: failure() && steps.create-deployment.outputs.deployment-id != ''
      run: |
        # Update GitHub deployment status to failure
        curl -s -X POST \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create-deployment.outputs.deployment-id }}/statuses \
          -d "{
            \"state\": \"failure\",
            \"description\": \"Vercel deployment failed\"
          }"
        echo "Updated deployment status to failure"
